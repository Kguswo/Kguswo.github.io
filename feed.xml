

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://kguswo.github.io/</id>
  <title>Now's Log</title>
  <subtitle>프로그래밍, 개발 팁과 프로젝트를 공유하는 기술 블로그입니다.</subtitle>
  <updated>2025-08-28T10:16:05+09:00</updated>
  <author>
    <name>Hyeon Jae Kim</name>
    <uri>https://kguswo.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://kguswo.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://kguswo.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Hyeon Jae Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>PGMS_귤 고르기 (Java)</title>
    <link href="https://kguswo.github.io/posts/PGMS%EA%B7%A4-%EA%B3%A0%EB%A5%B4%EA%B8%B0-Java/" rel="alternate" type="text/html" title="PGMS_귤 고르기 (Java)" />
    <published>2025-08-27T04:29:49+09:00</published>
  
    <updated>2025-08-27T04:29:49+09:00</updated>
  
    <id>https://kguswo.github.io/posts/PGMS%EA%B7%A4-%EA%B3%A0%EB%A5%B4%EA%B8%B0-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/PGMS%EA%B7%A4-%EA%B3%A0%EB%A5%B4%EA%B8%B0-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  <summary>[level 2] 귤 고르기 - 138476  문제 링크  성능 요약  메모리: 108 MB, 시간: 59.84 ms  구분  코딩테스트 연습 &amp;gt; 연습문제  채점결과  정확성: 100.0합계: 100.0 / 100.0  제출 일자  2025년 08월 27일 04:27:36  문제 설명  경화는 과수원에서 귤을 수확했습니다. 경화는 수확한 귤 중 'k'개를 골라 상자 하나에 담아 판매하려고 합니다. 그런데 수확한 귤의 크기가 일정하지 않아 보기에 좋지 않다고 생각한 경화는 귤을 크기별로 분류했을 때 서로 다른 종류의 수를 최소화하고 싶습니다.  예를 들어, 경화가 수확한 귤 8개의 크기가 [1, 3, 2, 5, 4, 5, 2, 3] 이라고 합시다. 경화가 귤 6개를 판매하고 싶다면, 크기가 1, 4...</summary>

  </entry>

  
  <entry>
    <title>PGMS_귤 고르기 (Java)</title>
    <link href="https://kguswo.github.io/posts/PGMS%EA%B7%A4-%EA%B3%A0%EB%A5%B4%EA%B8%B0-Java/" rel="alternate" type="text/html" title="PGMS_귤 고르기 (Java)" />
    <published>2025-08-27T04:29:49+09:00</published>
  
    <updated>2025-08-27T04:29:49+09:00</updated>
  
    <id>https://kguswo.github.io/posts/PGMS%EA%B7%A4-%EA%B3%A0%EB%A5%B4%EA%B8%B0-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/PGMS%EA%B7%A4-%EA%B3%A0%EB%A5%B4%EA%B8%B0-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  <summary>[level 2] 귤 고르기 - 138476  문제 링크  성능 요약  메모리: 108 MB, 시간: 59.84 ms  구분  코딩테스트 연습 &amp;gt; 연습문제  채점결과  정확성: 100.0합계: 100.0 / 100.0  제출 일자  2025년 08월 27일 04:27:36  문제 설명  경화는 과수원에서 귤을 수확했습니다. 경화는 수확한 귤 중 'k'개를 골라 상자 하나에 담아 판매하려고 합니다. 그런데 수확한 귤의 크기가 일정하지 않아 보기에 좋지 않다고 생각한 경화는 귤을 크기별로 분류했을 때 서로 다른 종류의 수를 최소화하고 싶습니다.  예를 들어, 경화가 수확한 귤 8개의 크기가 [1, 3, 2, 5, 4, 5, 2, 3] 이라고 합시다. 경화가 귤 6개를 판매하고 싶다면, 크기가 1, 4...</summary>

  </entry>

  
  <entry>
    <title>System Design Interview - 분산 시스템을 위한 유일 ID 생성기 설계</title>
    <link href="https://kguswo.github.io/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="System Design Interview - 분산 시스템을 위한 유일 ID 생성기 설계" />
    <published>2025-08-25T11:28:49+09:00</published>
  
    <updated>2025-08-25T11:28:49+09:00</updated>
  
    <id>https://kguswo.github.io/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="시스템" />
    
    <category term="디자인" />
    
  

  <summary>들어가며  이번은 책 7장인 분산 시스템을 위한 유일 ID 생성기를 설계해보겠다.  간단한 팀/개인 프로젝트에서 ID를 설계할 때는 auto_increment 속성으로 설정된 기본 키를 사용하곤 했었다.  하지만 대규모 분산 환경에서는 auto_increment를 사용할 수 없다.  데이터베이스 서버 한 대로는 요구를 충족할 수 없고, 여러 서버가 동시에 auto_increment 값을 생성한다면 중복된 값이 발생할 수도 있기 때문이다.    여러 유일한 ID 를 생성하는 방법을 다음과 같이 정리해보자.     다중 마스터 복제 (multi-master replication)   UUID (Universally Unique Identifier)   티켓 서버 (Ticket Server)   트위터 스노...</summary>

  </entry>

  
  <entry>
    <title>개발하며 Kotlin 문법 공부하기 (vs Java)</title>
    <link href="https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/" rel="alternate" type="text/html" title="개발하며 Kotlin 문법 공부하기 (vs Java)" />
    <published>2025-08-25T02:22:42+09:00</published>
  
    <updated>2025-08-25T02:22:42+09:00</updated>
  
    <id>https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="언어" />
    
  

  <summary>Kotlin 기본문법만 알고 있는 상태에서 Kotlin 프로젝트를 진행하며 공부하고 찾아본 문법들을 정리해봤다. 실제 개발하면서 마주친 Kotlin 문법들을 Java와 비교하여 정리하기 위해 글을 작성했다. (계속 추가 예정)   1. 기본 문법 차이점  클래스 선언  Kotlin에서 data class는 자동으로 equals, hashCode, toString 생성 // Kotlin data class RecommendationRequestDto(...)  //   Java에서는 필드, 생성자, getter, setter, equals, hashCode, toString 모두 수동으로 작성 // Java equivalent public class RecommendationRequestDto {    ...</summary>

  </entry>

  
  <entry>
    <title>개발하며 Kotlin 문법 공부하기 (vs Java)</title>
    <link href="https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/" rel="alternate" type="text/html" title="개발하며 Kotlin 문법 공부하기 (vs Java)" />
    <published>2025-08-25T02:22:42+09:00</published>
  
    <updated>2025-08-25T02:22:42+09:00</updated>
  
    <id>https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="언어" />
    
  

  <summary>Kotlin 기본문법만 알고 있는 상태에서 Kotlin 프로젝트를 진행하며 공부하고 찾아본 문법들을 정리해봤다. 실제 개발하면서 마주친 Kotlin 문법들을 Java와 비교하여 정리하기 위해 글을 작성했다. (계속 추가 예정)   1. 기본 문법 차이점  클래스 선언  Kotlin에서 data class는 자동으로 equals, hashCode, toString 생성 // Kotlin data class RecommendationRequestDto(...)  //   Java에서는 필드, 생성자, getter, setter, equals, hashCode, toString 모두 수동으로 작성 // Java equivalent public class RecommendationRequestDto {    ...</summary>

  </entry>

</feed>


