

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://kguswo.github.io/</id>
  <title>Now's Log</title>
  <subtitle>프로그래밍, 개발 팁과 프로젝트를 공유하는 기술 블로그입니다.</subtitle>
  <updated>2025-08-27T03:06:35+09:00</updated>
  <author>
    <name>Hyeon Jae Kim</name>
    <uri>https://kguswo.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://kguswo.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://kguswo.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Hyeon Jae Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>System Design Interview - 분산 시스템을 위한 유일 ID 생성기 설계</title>
    <link href="https://kguswo.github.io/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="System Design Interview - 분산 시스템을 위한 유일 ID 생성기 설계" />
    <published>2025-08-25T11:28:49+09:00</published>
  
    <updated>2025-08-25T11:28:49+09:00</updated>
  
    <id>https://kguswo.github.io/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="시스템" />
    
    <category term="디자인" />
    
  

  <summary>들어가며  이번은 책 7장인 분산 시스템을 위한 유일 ID 생성기를 설계해보겠다.  간단한 팀/개인 프로젝트에서 ID를 설계할 때는 auto_increment 속성으로 설정된 기본 키를 사용하곤 했었다.  하지만 대규모 분산 환경에서는 auto_increment를 사용할 수 없다.  데이터베이스 서버 한 대로는 요구를 충족할 수 없고, 여러 서버가 동시에 auto_increment 값을 생성한다면 중복된 값이 발생할 수도 있기 때문이다.    여러 유일한 ID 를 생성하는 방법을 다음과 같이 정리해보자.     다중 마스터 복제 (multi-master replication)   UUID (Universally Unique Identifier)   티켓 서버 (Ticket Server)   트위터 스노...</summary>

  </entry>

  
  <entry>
    <title>개발하며 Kotlin 문법 공부하기 (vs Java)</title>
    <link href="https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/" rel="alternate" type="text/html" title="개발하며 Kotlin 문법 공부하기 (vs Java)" />
    <published>2025-08-25T02:22:42+09:00</published>
  
    <updated>2025-08-25T02:22:42+09:00</updated>
  
    <id>https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="언어" />
    
  

  <summary>Kotlin 기본문법만 알고 있는 상태에서 Kotlin 프로젝트를 진행하며 공부하고 찾아본 문법들을 정리해봤다. 실제 개발하면서 마주친 Kotlin 문법들을 Java와 비교하여 정리하기 위해 글을 작성했다. (계속 추가 예정)   1. 기본 문법 차이점  클래스 선언  Kotlin에서 data class는 자동으로 equals, hashCode, toString 생성 // Kotlin data class RecommendationRequestDto(...)  //   Java에서는 필드, 생성자, getter, setter, equals, hashCode, toString 모두 수동으로 작성 // Java equivalent public class RecommendationRequestDto {    ...</summary>

  </entry>

  
  <entry>
    <title>Singleton 에 대하여</title>
    <link href="https://kguswo.github.io/posts/Singleton-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" rel="alternate" type="text/html" title="Singleton 에 대하여" />
    <published>2025-08-24T22:27:54+09:00</published>
  
    <updated>2025-08-24T22:27:54+09:00</updated>
  
    <id>https://kguswo.github.io/posts/Singleton-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/Singleton-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="공부" />
    
  

  <summary>들어가며  프로그래밍을 하다 보면 특정 객체가 딱 1개 필요한 상황이 있다. 예를 들어 설정 파일 관리자, 로그 기록기 등이 있다. 이런 경우 사용하는 것이 싱글턴 패턴 이다.    싱글턴 패턴이란?    클래스의 인스턴스가 오직 하나만 생성도도록 보장하고, 이 인스턴스에 전역적으로 접근할 수 있는 방법을 제공하는 생성 디자인 패턴이다.     왜 싱글턴이 필요할까? 예시를 통해 알아가보자. 서비스를 개발할 때 다음과 같은 상황은 피하고 싶을 것이다. DatabaseConnection db1 = new DatabaseConnection(); DatabaseConnection db2 = new DatabaseConnection(); DatabaseConnection db3 = new DatabaseCon...</summary>

  </entry>

  
  <entry>
    <title>BOJ_1623_신년 파티 (Java)</title>
    <link href="https://kguswo.github.io/posts/BOJ1623%EC%8B%A0%EB%85%84-%ED%8C%8C%ED%8B%B0-Java/" rel="alternate" type="text/html" title="BOJ_1623_신년 파티 (Java)" />
    <published>2025-08-20T03:22:55+09:00</published>
  
    <updated>2025-08-20T03:22:55+09:00</updated>
  
    <id>https://kguswo.github.io/posts/BOJ1623%EC%8B%A0%EB%85%84-%ED%8C%8C%ED%8B%B0-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/BOJ1623%EC%8B%A0%EB%85%84-%ED%8C%8C%ED%8B%B0-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  <summary>[Gold I] 신년 파티 - 1623  문제 링크  성능 요약  메모리: 147364 KB, 시간: 3040 ms  분류  다이나믹 프로그래밍, 트리, 트리에서의 다이나믹 프로그래밍  제출 일자  2025년 8월 20일 03:09:29  문제 설명  '주식회사 월드'의 조직도는 루트가 있는 트리 형태의 구조를 가지고 있다. 즉, 사장님을 트리의 루트로 하며, 직원들은 자신의 직속상관 바로 밑에 매달려 있는 형태가 된다. 김진영 부사장은 2008년 설을 맞아 '주식회사 월드'의 신년 파티를 계획 중에 있다. 단, 만일 부하직원이 자신의 직속상관과 파티에 함께 오게 되면 분위기가 경직될 수 있으므로, 파티의 분위기를 위해 부하직원과 그 직속상관은 같이 초대될 수 없도록 하려고 한다. 예를 들어 최백준 과...</summary>

  </entry>

  
  <entry>
    <title>System Design Interview - (1)</title>
    <link href="https://kguswo.github.io/posts/System-Design-Interview-1/" rel="alternate" type="text/html" title="System Design Interview - (1)" />
    <published>2025-08-18T18:55:00+09:00</published>
  
    <updated>2025-08-18T18:55:00+09:00</updated>
  
    <id>https://kguswo.github.io/posts/System-Design-Interview-1/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/System-Design-Interview-1/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="시스템" />
    
    <category term="디자인" />
    
  

  <summary>사용자 수에 따른 규모 확장성    단일 서버  웹 - 앱 - 데이터베이스 - 캐시 등이 한 서버에서 실행된다.    사용자 요청 처리 흐름     DNS 서버의 Domain address 에 대한 Ip address 를 요청한다.   DNS 에서 Ip address 를 반환 받는다.   해당 Ip address 를 통해서 웹서버에 HTTP 요청 보낸다.   웹 페이지나 JSON 형태의 응답 반환한다.     실제 요청이 오는 2가지 단말          웹 어플리케이션 : 비즈니스 로직, 데이터 저장 등을 처리하기 위해서 서버 구현용 언어를 사용한다. 프레젠테이션용으로 클라이언트 구현용 언어를 사용한다.           모바일 앱 : 통신을 위해서 HTTP 프로토콜을 이용한다. HTTP 프로토콜을 ...</summary>

  </entry>

</feed>


