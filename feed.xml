

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://kguswo.github.io/</id>
  <title>Now's Log</title>
  <subtitle>프로그래밍, 개발 팁과 프로젝트를 공유하는 기술 블로그입니다.</subtitle>
  <updated>2025-09-25T10:21:50+09:00</updated>
  <author>
    <name>Hyeon Jae Kim</name>
    <uri>https://kguswo.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://kguswo.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://kguswo.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Hyeon Jae Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Spring AI에 대하여</title>
    <link href="https://kguswo.github.io/posts/Spring-AI%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" rel="alternate" type="text/html" title="Spring AI에 대하여" />
    <published>2025-09-21T01:32:30+09:00</published>
  
    <updated>2025-09-21T01:32:30+09:00</updated>
  
    <id>https://kguswo.github.io/posts/Spring-AI%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/Spring-AI%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="공부" />
    
  

  <summary>들어가며   최근 AI와 LLM이 소프트웨어 개발의 새로운 패러다임으로 자리 잡으면서, 기존 Spring 생태계에서도 이러한 변화에 대응할 수 있는 프레임워크가 필요해졌다. Spring AI는 이런 요구에 응답하여 탄생한 프레임워크로, Spring 개발자들이 익숙한 방식으로 AI 기능을 통합할 수 있게 해준다.  AI에 큰 관심과 향후 커리어에 AI를 접목하고싶은 서버 개발자로서, 이 글을 통해 Spring AI의 핵심 개념들을 기술적으로 간단히 살펴보고 실제 구현에서 고려해야 할 세부사항들을 정리해보려 한다.  Spring AI란?   Spring AI는 AI 엔지니어링을 위한 애플리케이션 프레임워크다. 핵심 목표는 Spring 생태계의 설계 원칙인 이식성(Portability)과 모듈화 설계(Mod...</summary>

  </entry>

  
  <entry>
    <title>PGMS_2차원 동전 뒤집기 (Java)</title>
    <link href="https://kguswo.github.io/posts/PGMS2%EC%B0%A8%EC%9B%90-%EB%8F%99%EC%A0%84-%EB%92%A4%EC%A7%91%EA%B8%B0-Java/" rel="alternate" type="text/html" title="PGMS_2차원 동전 뒤집기 (Java)" />
    <published>2025-09-18T10:34:45+09:00</published>
  
    <updated>2025-09-18T10:34:45+09:00</updated>
  
    <id>https://kguswo.github.io/posts/PGMS2%EC%B0%A8%EC%9B%90-%EB%8F%99%EC%A0%84-%EB%92%A4%EC%A7%91%EA%B8%B0-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/PGMS2%EC%B0%A8%EC%9B%90-%EB%8F%99%EC%A0%84-%EB%92%A4%EC%A7%91%EA%B8%B0-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  <summary>[level 3] 2차원 동전 뒤집기 - 131703  문제 링크  성능 요약  메모리: 74 MB, 시간: 3.49 ms  구분  코딩테스트 연습 &amp;gt; 연습문제  채점결과  정확성: 100.0합계: 100.0 / 100.0  제출 일자  2025년 09월 17일 11:28:01  문제 설명  한수는 직사각형 모양의 공간에 놓인 동전들을 뒤집는 놀이를 하고 있습니다. 모든 동전들은 앞과 뒤가 구분되어 있으며, 동전을 뒤집기 위해서는 같은 줄에 있는 모든 동전을 뒤집어야 합니다. 동전들의 초기 상태와 목표 상태가 주어졌을 때, 초기 상태에서 최소 몇 번의 동전을 뒤집어야 목표 상태가 되는지 알아봅시다.    예를 들어, 위 그림에서 맨 왼쪽이 초기 상태, 맨 오른쪽이 목표 상태인 경우에 대해 알아봅시...</summary>

  </entry>

  
  <entry>
    <title>PGMS_스킬트리 (Java)</title>
    <link href="https://kguswo.github.io/posts/PGMS%EC%8A%A4%ED%82%AC%ED%8A%B8%EB%A6%AC-Java/" rel="alternate" type="text/html" title="PGMS_스킬트리 (Java)" />
    <published>2025-09-17T11:40:33+09:00</published>
  
    <updated>2025-09-17T11:40:33+09:00</updated>
  
    <id>https://kguswo.github.io/posts/PGMS%EC%8A%A4%ED%82%AC%ED%8A%B8%EB%A6%AC-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/PGMS%EC%8A%A4%ED%82%AC%ED%8A%B8%EB%A6%AC-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  <summary>[level 2] 스킬트리 - 49993  문제 링크  성능 요약  메모리: 79.6 MB, 시간: 0.21 ms  구분  코딩테스트 연습 &amp;gt; Summer／Winter Coding（～2018）  채점결과  정확성: 100.0합계: 100.0 / 100.0  제출 일자  2025년 09월 17일 10:33:38  문제 설명  선행 스킬이란 어떤 스킬을 배우기 전에 먼저 배워야 하는 스킬을 뜻합니다.  예를 들어 선행 스킬 순서가 스파크 → 라이트닝 볼트 → 썬더일때, 썬더를 배우려면 먼저 라이트닝 볼트를 배워야 하고, 라이트닝 볼트를 배우려면 먼저 스파크를 배워야 합니다.  위 순서에 없는 다른 스킬(힐링 등)은 순서에 상관없이 배울 수 있습니다. 따라서 스파크 → 힐링 → 라이트닝 볼트 → 썬더와...</summary>

  </entry>

  
  <entry>
    <title>PGMS_거리두기 확인하기 (Java)</title>
    <link href="https://kguswo.github.io/posts/PGMS%EA%B1%B0%EB%A6%AC%EB%91%90%EA%B8%B0-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-Java-63sj1vsu/" rel="alternate" type="text/html" title="PGMS_거리두기 확인하기 (Java)" />
    <published>2025-09-12T01:21:37+09:00</published>
  
    <updated>2025-09-12T01:21:37+09:00</updated>
  
    <id>https://kguswo.github.io/posts/PGMS%EA%B1%B0%EB%A6%AC%EB%91%90%EA%B8%B0-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-Java-63sj1vsu/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/PGMS%EA%B1%B0%EB%A6%AC%EB%91%90%EA%B8%B0-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-Java-63sj1vsu/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  <summary>[level 2] 거리두기 확인하기 - 81302  문제 링크  성능 요약  메모리: 75.7 MB, 시간: 0.19 ms  구분  코딩테스트 연습 &amp;gt; 2021 카카오 채용연계형 인턴십  채점결과  정확성: 100.0합계: 100.0 / 100.0  제출 일자  2025년 09월 10일 10:44:45  문제 설명  개발자를 희망하는 죠르디가 카카오에 면접을 보러 왔습니다. 코로나 바이러스 감염 예방을 위해 응시자들은 거리를 둬서 대기를 해야하는데 개발 직군 면접인 만큼 아래와 같은 규칙으로 대기실에 거리를 두고 앉도록 안내하고 있습니다.    대기실은 5개이며, 각 대기실은 5x5 크기입니다. 거리두기를 위하여 응시자들 끼리는 맨해튼 거리1가 2 이하로 앉지 말아 주세요. 단 응시자가 앉아있는 ...</summary>

  </entry>

  
  <entry>
    <title>PGMS_추석 트래픽 (Java)</title>
    <link href="https://kguswo.github.io/posts/PGMS%EC%B6%94%EC%84%9D-%ED%8A%B8%EB%9E%98%ED%94%BD-Java/" rel="alternate" type="text/html" title="PGMS_추석 트래픽 (Java)" />
    <published>2025-09-10T11:49:39+09:00</published>
  
    <updated>2025-09-10T11:49:39+09:00</updated>
  
    <id>https://kguswo.github.io/posts/PGMS%EC%B6%94%EC%84%9D-%ED%8A%B8%EB%9E%98%ED%94%BD-Java/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/PGMS%EC%B6%94%EC%84%9D-%ED%8A%B8%EB%9E%98%ED%94%BD-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  <summary>[level 3] [1차] 추석 트래픽 - 17676  문제 링크  성능 요약  메모리: 83.2 MB, 시간: 100.74 ms  구분  코딩테스트 연습 &amp;gt; 2018 KAKAO BLIND RECRUITMENT  채점결과  정확성: 100.0합계: 100.0 / 100.0  제출 일자  2025년 09월 10일 11:40:34  문제 설명  추석 트래픽  이번 추석에도 시스템 장애가 없는 명절을 보내고 싶은 어피치는 서버를 증설해야 할지 고민이다. 장애 대비용 서버 증설 여부를 결정하기 위해 작년 추석 기간인 9월 15일 로그 데이터를 분석한 후 초당 최대 처리량을 계산해보기로 했다. 초당 최대 처리량은 요청의 응답 완료 여부에 관계없이 임의 시간부터 1초(=1,000밀리초)간 처리하는 요청의 최...</summary>

  </entry>

</feed>


