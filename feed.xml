

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Now's Log</title>
  <subtitle>프로그래밍, 개발 팁과 프로젝트를 공유하는 기술 블로그입니다.</subtitle>
  <updated>2025-08-26T13:48:38+09:00</updated>
  <author>
    <name>Hyeon Jae Kim</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Hyeon Jae Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>System Design Interview - 분산 시스템을 위한 유일 ID 생성기 설계</title>
    <link href="/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="System Design Interview - 분산 시스템을 위한 유일 ID 생성기 설계" />
    <published>2025-08-25T11:28:49+09:00</published>
  
    <updated>2025-08-25T11:28:49+09:00</updated>
  
    <id>/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/</id>
    <content type="text/html" src="/posts/System-Design-Interview-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9D%BC-ID-%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%84%A4%EA%B3%84/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="시스템" />
    
    <category term="디자인" />
    
  

  <summary>이번은 책 7장인 분산 시스템을 위한 유일 ID 생성기를 설계해보겠다.간단한 팀/개인 프로젝트에서 ID를 설계할 때는 auto_increment 속성으로 설정된 기본 키를 사용하곤 했었다.하지만 대규모 분산 환경에서는 auto_increment를 사용할 수 없다.데이터</summary>

  </entry>

  
  <entry>
    <title>개발하며 Kotlin 문법 공부하기 (vs Java)</title>
    <link href="/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/" rel="alternate" type="text/html" title="개발하며 Kotlin 문법 공부하기 (vs Java)" />
    <published>2025-08-25T02:22:42+09:00</published>
  
    <updated>2025-08-25T02:22:42+09:00</updated>
  
    <id>/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/</id>
    <content type="text/html" src="/posts/%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B0-Kotlin-%EB%AC%B8%EB%B2%95-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-vs-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="언어" />
    
  

  <summary>Kotlin 기본문법만 알고 있는 상태에서 Kotlin 프로젝트를 진행하며 공부하고 찾아본 문법들을 정리해봤다.실제 개발하면서 마주친 Kotlin 문법들을 Java와 비교하여 정리하기 위해 글을 작성했다. (계속 추가 예정)Kotlin에서 data class는 자동으로</summary>

  </entry>

  
  <entry>
    <title>Singleton 에 대하여</title>
    <link href="/posts/Singleton-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" rel="alternate" type="text/html" title="Singleton 에 대하여" />
    <published>2025-08-24T22:27:54+09:00</published>
  
    <updated>2025-08-24T22:27:54+09:00</updated>
  
    <id>/posts/Singleton-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/</id>
    <content type="text/html" src="/posts/Singleton-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="공부" />
    
  

  <summary>들어가며  프로그래밍을 하다 보면 특정 객체가 딱 1개 필요한 상황이 있다. 예를 들어 설정 파일 관리자, 로그 기록기 등이 있다. 이런 경우 사용하는 것이 싱글턴 패턴 이다.  싱글턴 패턴이란? > 클래스의 인스턴스가 오직 하나만 생성도도록 보장하고, 이 인스턴스에</summary>

  </entry>

  
  <entry>
    <title>BOJ_1623_신년 파티 (Java)</title>
    <link href="/posts/BOJ1623%EC%8B%A0%EB%85%84-%ED%8C%8C%ED%8B%B0-Java/" rel="alternate" type="text/html" title="BOJ_1623_신년 파티 (Java)" />
    <published>2025-08-20T03:22:55+09:00</published>
  
    <updated>2025-08-20T03:22:55+09:00</updated>
  
    <id>/posts/BOJ1623%EC%8B%A0%EB%85%84-%ED%8C%8C%ED%8B%B0-Java/</id>
    <content type="text/html" src="/posts/BOJ1623%EC%8B%A0%EB%85%84-%ED%8C%8C%ED%8B%B0-Java/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  <summary>문제 링크 메모리: 147364 KB, 시간: 3040 ms다이나믹 프로그래밍, 트리, 트리에서의 다이나믹 프로그래밍2025년 8월 20일 03:09:29dfs와 tree 구조를 사용했다.백트래킹으로 경로도 탐색했다.import java.io.;import java.u</summary>

  </entry>

  
  <entry>
    <title>System Design Interview - (1)</title>
    <link href="/posts/System-Design-Interview-1/" rel="alternate" type="text/html" title="System Design Interview - (1)" />
    <published>2025-08-18T18:55:00+09:00</published>
  
    <updated>2025-08-18T18:55:00+09:00</updated>
  
    <id>/posts/System-Design-Interview-1/</id>
    <content type="text/html" src="/posts/System-Design-Interview-1/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="시스템" />
    
    <category term="디자인" />
    
  

  <summary>웹 - 앱 - 데이터베이스 - 캐시 등이 한 서버에서 실행된다.DNS 서버의 Domain address 에 대한 Ip address 를 요청한다.DNS 에서 Ip address 를 반환 받는다.해당 Ip address 를 통해서 웹서버에 HTTP 요청 보낸다.웹 페이지</summary>

  </entry>

</feed>


