

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://kguswo.github.io/</id>
  <title>Now's Log</title>
  <subtitle>프로그래밍, 개발 팁과 프로젝트를 공유하는 기술 블로그입니다.</subtitle>
  <updated>2025-10-22T10:47:32+09:00</updated>
  <author>
    <name>Hyeon Jae Kim</name>
    <uri>https://kguswo.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://kguswo.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://kguswo.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Hyeon Jae Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Effective Java] - 이왕이면 제네릭 메서드로 만들라</title>
    <link href="https://kguswo.github.io/posts/Effective-Java-%EC%9D%B4%EC%99%95%EC%9D%B4%EB%A9%B4-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC/" rel="alternate" type="text/html" title="[Effective Java] - 이왕이면 제네릭 메서드로 만들라" />
    <published>2025-10-21T15:55:24+09:00</published>
  
    <updated>2025-10-21T15:55:24+09:00</updated>
  
    <id>https://kguswo.github.io/posts/Effective-Java-%EC%9D%B4%EC%99%95%EC%9D%B4%EB%A9%B4-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/Effective-Java-%EC%9D%B4%EC%99%95%EC%9D%B4%EB%A9%B4-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="개발서적" />
    
    <category term="이펙티브자바" />
    
  

  <summary>Item 30 : 이왕이면 제네릭 메서드로 만들라  들어가며  클래스와 마찬가지로 메서드도 제네릭으로 만들 수 있다. Collections의 알고리즘 메서드(binarySearch, sort 등)는 모두 제네릭이다. 제네릭 메서드는 클라이언트가 직접 형변환을 해야 하는 메서드보다 훨씬 안전하고 사용하기 쉽다. 이번 아이템에서는 제네릭 메서드를 작성하는 방법과 그 이점을 살펴본다.    제네릭 메서드의 필요성  먼저 타입 안전하지 않은 메서드의 예를 살펴보자.  // 잘못된 예 - raw 타입 사용 public static Set union(Set s1, Set s2) {     Set result = new HashSet(s1);     result.addAll(s2);     return result...</summary>

  </entry>

  
  <entry>
    <title>[Effective Java] - 비검사 경고를 제거하라</title>
    <link href="https://kguswo.github.io/posts/Effective-Java-%EB%A9%A4%EB%B2%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EB%90%98%EB%8F%84%EB%A1%9D-static%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC-ihbnz2cv/" rel="alternate" type="text/html" title="[Effective Java] - 비검사 경고를 제거하라" />
    <published>2025-10-21T15:39:04+09:00</published>
  
    <updated>2025-10-21T15:39:04+09:00</updated>
  
    <id>https://kguswo.github.io/posts/Effective-Java-%EB%A9%A4%EB%B2%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EB%90%98%EB%8F%84%EB%A1%9D-static%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC-ihbnz2cv/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/Effective-Java-%EB%A9%A4%EB%B2%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EB%90%98%EB%8F%84%EB%A1%9D-static%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC-ihbnz2cv/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="개발서적" />
    
    <category term="이펙티브자바" />
    
  

  <summary>Item 27 : 비검사 경고를 제거하라  들어가며  제네릭을 사용하기 시작하면 수많은 컴파일러 경고를 마주하게 된다. 비검사 형변환 경고, 비검사 메서드 호출 경고, 비검사 매개변수화 가변인수 타입 경고, 비검사 변환 경고 등이 그것이다. 제네릭에 익숙해질수록 마주치는 경고 수는 줄어들지만, 새로 작성한 코드가 한 번에 깨끗하게 컴파일되리라 기대하기는 어렵다.  많은 비검사 경고는 쉽게 제거할 수 있다. 코드를 조금만 수정하면 경고가 사라지는 경우가 대부분이다.  제거하기 어려운 경고도 있지만, 할 수 있는 한 모든 비검사 경고를 제거하자. 모두 제거한다면 그 코드는 타입 안전성이 보장된다. 즉, 런타임에 ClassCastException 이 발생할 일이 없고, 의도한 대로 잘 동작하리라 확신할 수 ...</summary>

  </entry>

  
  <entry>
    <title>프리코스 1주차를 진행하며</title>
    <link href="https://kguswo.github.io/posts/%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-1%EC%A3%BC%EC%B0%A8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EB%A9%B0/" rel="alternate" type="text/html" title="프리코스 1주차를 진행하며" />
    <published>2025-10-20T21:24:58+09:00</published>
  
    <updated>2025-10-20T21:24:58+09:00</updated>
  
    <id>https://kguswo.github.io/posts/%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-1%EC%A3%BC%EC%B0%A8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EB%A9%B0/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-1%EC%A3%BC%EC%B0%A8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EB%A9%B0/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="우아한테크코스" />
    
    <category term="프리코스" />
    
  

  <summary>들어가며     우아한테크코스 8기 프리코스 1주차 과제는 문자열 계산기 구현이었다. 간단해 보이는 과제였지만, 실제로 구현하면서 다양한 문제 상황을 마주했고 하나씩 해결해나가는 과정에서 많은 것을 배울 수 있었다. 이 글에서는 구현 중 만났던 여러 고민들과 해결 과정을 기록하고자 한다.       1. 커스텀 구분자 사용 시 기본 구분자도 함께 쓸까?  과제의 요구사항에는 아래와 같이 적혀있었다.     앞의 기본 구분자(쉼표, 콜론) 외에 커스텀 구분자를 지정할 수 있다.   이 문장에서 “외에”라는 표현이 애매하다고 생각했다. 예를 들어 //?\n1?2:3이라는 입력이 들어왔을 때 두 가지 상황을 생각해볼 수 있었다.     Case 1: 커스텀 구분자 ? 추가 → ?, ,, : 모두 구분자 → ...</summary>

  </entry>

  
  <entry>
    <title>[Effective Java] - 멤버 클래스는 되도록 static으로 만들라</title>
    <link href="https://kguswo.github.io/posts/Effective-Java-%EB%A9%A4%EB%B2%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EB%90%98%EB%8F%84%EB%A1%9D-static%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC/" rel="alternate" type="text/html" title="[Effective Java] - 멤버 클래스는 되도록 static으로 만들라" />
    <published>2025-10-17T17:34:28+09:00</published>
  
    <updated>2025-10-17T17:34:28+09:00</updated>
  
    <id>https://kguswo.github.io/posts/Effective-Java-%EB%A9%A4%EB%B2%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EB%90%98%EB%8F%84%EB%A1%9D-static%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/Effective-Java-%EB%A9%A4%EB%B2%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EB%90%98%EB%8F%84%EB%A1%9D-static%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EB%9D%BC/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="개발서적" />
    
    <category term="이펙티브자바" />
    
  

  <summary>Item 24 : 멤버 클래스는 되도록 static으로 만들라  들어가며  중첩 클래스(nested class)는 다른 클래스 안에 정의된 클래스를 말한다. 중첩 클래스는 자신을 감싼 바깥 클래스에서만 쓰여야 하며, 그 외의 쓰임새가 있다면 톱레벨 클래스로 만들어야 한다. 중첩 클래스의 종류는 네 가지다.     정적 멤버 클래스   (비정적) 멤버 클래스   익명 클래스   지역 클래스   이 중 첫 번째를 제외한 나머지는 내부 클래스(inner class)에 해당한다. 이번 아이템에서는 각 중첩 클래스를 언제, 왜 사용해야 하는지 이야기한다.    정적 멤버 클래스  정적 멤버 클래스는 다른 클래스 안에 선언되고, 바깥 클래스의 private 멤버에도 접근할 수 있다는 점만 제외하고는 일반 클래스와...</summary>

  </entry>

  
  <entry>
    <title>[Effective Java] - 인터페이스는 구현하는 쪽을 생각해 설계하라</title>
    <link href="https://kguswo.github.io/posts/Effective-Java-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%AA%BD%EC%9D%84-%EC%83%9D%EA%B0%81%ED%95%B4-%EC%84%A4%EA%B3%84%ED%95%98%EB%9D%BC/" rel="alternate" type="text/html" title="[Effective Java] - 인터페이스는 구현하는 쪽을 생각해 설계하라" />
    <published>2025-10-17T17:32:46+09:00</published>
  
    <updated>2025-10-17T17:32:46+09:00</updated>
  
    <id>https://kguswo.github.io/posts/Effective-Java-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%AA%BD%EC%9D%84-%EC%83%9D%EA%B0%81%ED%95%B4-%EC%84%A4%EA%B3%84%ED%95%98%EB%9D%BC/</id>
    <content type="text/html" src="https://kguswo.github.io/posts/Effective-Java-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%AA%BD%EC%9D%84-%EC%83%9D%EA%B0%81%ED%95%B4-%EC%84%A4%EA%B3%84%ED%95%98%EB%9D%BC/" />
    <author>
      <name>Hyeon Jae Kim</name>
    </author>

  
    
    <category term="개발서적" />
    
    <category term="이펙티브자바" />
    
  

  <summary>Item 21 : 인터페이스는 구현하는 쪽을 생각해 설계하라  들어가며 자바 8 이전에는 기존 구현체를 깨뜨리지 않고는 인터페이스에 메서드를 추가할 방법이 없었다. 인터페이스에 메서드를 추가하면 보통은 컴파일 오류가 났다. 추가된 메서드가 우연히 기존 구현체에 이미 존재할 가능성은 아주 낮았기 때문이다.  자바 8에서는 기존 인터페이스에 메서드를 추가할 수 있도록 디폴트 메서드(default method) 를 소개했다. 디폴트 메서드를 선언하면, 그 인터페이스를 구현한 후 디폴트 메서드를 재정의하지 않은 모든 클래스에서 디폴트 구현이 쓰이게 된다.    디폴트 메서드의 등장  /**  * Removes all of the elements of this collection that satisfy the ...</summary>

  </entry>

</feed>


